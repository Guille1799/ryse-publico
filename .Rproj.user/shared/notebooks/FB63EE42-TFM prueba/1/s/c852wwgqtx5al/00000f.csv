"0","## 1. helper  ---------------------------------------------------------------"
"0","`%||%` <- function(a,b) if (is.null(a) || length(a)==0) b else a"
"0",""
"0","safe_GET <- function(url, token, pause = 1.3){"
"0","  r <- GET(url, add_headers(`X-Riot-Token` = token))"
"0","  if (status_code(r) == 429){         # rate-limit"
"0","    message(""⏳ Rate-limit: espero 65 s…""); Sys.sleep(65)"
"0","    r <- GET(url, add_headers(`X-Riot-Token` = token))"
"0","  }"
"0","  if (status_code(r) != 200) stop(""HTTP "", status_code(r),"
"0","                                  "" – "", url, call. = FALSE)"
"0","  Sys.sleep(pause)"
"0","  r"
"0","}"
"0",""
"0","## 2. función principal  ----------------------------------------------------"
"0","get_match_stats_by_puuid <- function(puuid,"
"0","                                     n        = 50,"
"0","                                     queueId  = 420,"
"0","                                     routing  = ""europe"","
"0","                                     region   = ""EUW1"","
"0","                                     api_key)"
"0","{"
"0","  ## Variables diana (37) ---------------------------------------------------"
"0","  wanted <- c("
"0","    ""puuid"",""gameName"",""tagLine"",""tier"",""leaguePoints"","
"0","    ""match_id"",""gameDuration"",""championName"",""individualPosition"","
"0","    ""champLevel"",""goldEarned"",""totalMinionsKilled"","
"0","    ""kills"",""deaths"",""assists"","
"0","    ""totalDamageDealt"",""totalDamageTaken"","
"0","    ""damageDealtToBuildings"",""damageDealtToObjectives"",""damageDealtToTurrets"","
"0","    ""visionScore"",""baron_kills"",""dragon_kills"",""tower_kills"","
"0","    ""herald_kills"",""inhibitor_kills"",""champion_kills"",""win"",""date"","
"0","    ""longestTimeSpentLiving"",""timeCCingOthers"",""timePlayed"","
"0","    ""totalTimeCCDealt"",""totalTimeSpentDead"","
"0","    ""completeSupportQuestInTime"",""firstTurretKilledTime"",""mejaisFullStackInTime"""
"0","  )"
"0","  "
"0","  ## A. lista de match-IDs --------------------------------------------------"
"0","  list_url <- sprintf("
"0","    ""https://%s.api.riotgames.com/lol/match/v5/matches/by-puuid/%s/ids?start=0&count=%d&queue=%d"","
"0","    routing, puuid, n, queueId"
"0","  )"
"0","  ids <- safe_GET(list_url, api_key, 0) |> content(""text"") |> fromJSON()"
"0","  if (length(ids) == 0) return(tibble())          # sin partidas"
"0","  "
"0","  ## B. rango / LP solo en Solo-Duo ----------------------------------------"
"0","  tier_url <- sprintf("
"0","    ""https://%s.api.riotgames.com/lol/league/v4/entries/by-puuid/%s?api_key=%s"","
"0","    region, puuid, api_key"
"0","  )"
"0","  tier_dat <- safe_GET(tier_url, api_key, 0.4) |> content(""text"") |> fromJSON()"
"0","  "
"0","  tier_row <- dplyr::filter(tier_dat, queueType == ""RANKED_SOLO_5x5"")"
"0","  tier         <- tier_row$tier[1]         %||% NA_character_"
"0","  leaguePoints <- tier_row$leaguePoints[1] %||% NA_integer_"
"0","  "
"0","  ## C. bajar cada partida --------------------------------------------------"
"0","  fetch_one <- function(match_id){"
"0","    m_url <- sprintf(""https://%s.api.riotgames.com/lol/match/v5/matches/%s"","
"0","                     routing, match_id)"
"0","    info <- safe_GET(m_url, api_key) |> content(""text"") |> fromJSON()"
"0","    "
"0","    if (info$info$queueId != queueId) return(NULL)    # por si acaso"
"0","    "
"0","    me <- info$info$participants |>"
"0","          dplyr::filter(puuid == !!puuid)"
"0","    "
"0","    teamIdx <- which(info$info$teams$teamId == me$teamId)"
"0","    obj     <- info$info$teams$objectives"
"0","    "
"0","    tibble("
"0","      puuid   = puuid,"
"0","      gameName= me$riotIdGameName %||% NA_character_,"
"0","      tagLine = me$riotIdTagline  %||% NA_character_,"
"0","      tier    = tier,"
"0","      leaguePoints = leaguePoints,"
"0","      match_id     = match_id,"
"0","      gameDuration = info$info$gameDuration,"
"0","      championName = me$championName,"
"0","      individualPosition = me$individualPosition,"
"0","      champLevel = me$champLevel,"
"0","      goldEarned = me$goldEarned,"
"0","      totalMinionsKilled = me$totalMinionsKilled,"
"0","      kills   = me$kills, deaths = me$deaths, assists = me$assists,"
"0","      totalDamageDealt = me$totalDamageDealt,"
"0","      totalDamageTaken = me$totalDamageTaken,"
"0","      damageDealtToBuildings = me$damageDealtToBuildings,"
"0","      damageDealtToObjectives = me$damageDealtToObjectives,"
"0","      damageDealtToTurrets   = me$damageDealtToTurrets,"
"0","      visionScore            = me$visionScore,"
"0","      baron_kills     = obj$baron$kills     [teamIdx] %||% NA_integer_,"
"0","      dragon_kills    = obj$dragon$kills    [teamIdx] %||% NA_integer_,"
"0","      tower_kills     = obj$tower$kills     [teamIdx] %||% NA_integer_,"
"0","      herald_kills    = obj$riftHerald$kills[teamIdx] %||% NA_integer_,"
"0","      inhibitor_kills = obj$inhibitor$kills [teamIdx] %||% NA_integer_,"
"0","      champion_kills  = obj$champion$kills  [teamIdx] %||% NA_integer_,"
"0","      win   = me$win,"
"0","      date  = as_datetime(info$info$gameStartTimestamp/1000),"
"0","      longestTimeSpentLiving = me$longestTimeSpentLiving %||% NA_integer_,"
"0","      timeCCingOthers        = me$timeCCingOthers        %||% NA_integer_,"
"0","      timePlayed             = me$timePlayed             %||% NA_integer_,"
"0","      totalTimeCCDealt       = me$totalTimeCCDealt       %||% NA_integer_,"
"0","      totalTimeSpentDead     = me$totalTimeSpentDead     %||% NA_integer_,"
"0","      completeSupportQuestInTime = me$completeSupportQuestInTime %||% NA,"
"0","      firstTurretKilledTime      = me$firstTurretKilledTime      %||% NA,"
"0","      mejaisFullStackInTime      = me$mejaisFullStackInTime      %||% NA"
"0","    )"
"0","  }"
"0","  "
"0","  out <- purrr::map(ids, fetch_one) |> purrr::compact() |> dplyr::bind_rows()"
"0","  "
"0","  ## D. asegurar columnas y tipos ------------------------------------------"
"0","  missing_cols <- setdiff(wanted, names(out))"
"0","  if (length(missing_cols) > 0){"
"0","    out[missing_cols] <- NA"
"0","  }"
"0","  out <- out |> dplyr::mutate(across(where(is.logical), as.integer)) |>"
"0","         dplyr::select(all_of(wanted))"
"0","  "
"0","  out"
"0","}"
"0",""
